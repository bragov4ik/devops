name: Rust

on:
  push:
    branches:
      - 'lab*'
      - $default-branch
    paths:
      - 'app_rust/**'
      - '.github/workflows/rust**'
  pull_request:
    branches:
      - $default-branch 
    paths:
      - 'app_rust/**'
      - '.github/workflows/rust**'

# defaults:
#   run:
#     working-directory: ./app_rust

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  security-events: write

jobs:
  lints:

    # To avoid multiple runs on single commit
    # It is still checked by push trigger, so no worries.
    if: "!(contains(github.head_ref, 'lab') == true && endsWith(github.base_ref, 'master'))"
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - run: rustup toolchain install stable --profile minimal
    # It's better configured for rust thus not default
    - uses: Swatinem/rust-cache@v1
      with:
        cache-on-failure: true

    - name: Code style check
      run: cargo fmt --all --verbose --check
      working-directory: ./app_rust
    - name: Build
      run: cargo check --target-dir ../target
      working-directory: ./app_rust
    - name: Run clippy check
      run: cargo clippy --all-features --target-dir ../target -- -D warnings
      working-directory: ./app_rust

  tests:

    # To avoid multiple runs on single commit
    # It is still checked by push trigger, so no worries.
    if: "!(contains(github.head_ref, 'lab') == true && endsWith(github.base_ref, 'master'))"
    needs: [lints]
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - run: rustup toolchain install stable --profile minimal
    # It's better configured for rust thus not default
    - uses: Swatinem/rust-cache@v1
      with:
        cache-on-failure: true
    - name: Run tests
      run: cargo test --verbose --target-dir ../target

  security:

    # To avoid multiple runs on single commit
    # It is still checked by push trigger, so no worries.
    if: "!(contains(github.head_ref, 'lab') == true && endsWith(github.base_ref, 'master'))"
    needs: [tests, lints]
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - run: rustup toolchain install stable --profile minimal
    # It's better configured for rust thus not default
    - uses: Swatinem/rust-cache@v1
      with:
        cache-on-failure: true

    - uses: snyk/actions/setup@master
    - name: Snyk monitor
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true # To make sure that SARIF upload gets called
      run: snyk test --sarif-file-output=snyk.sarif
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: ./app_rust/snyk.sarif
        # Optional category for the results
        # Used to differentiate multiple results for one commit
        category: snyk-rust-analysis
