name: Python package

on:
  push:
    branches:
      - 'lab*'
      - master
  pull_request:
    branches:
      - master

env:
  SKIP_WORKFLOW: "!(contains(github.head_ref, 'lab') == true && endsWith(github.base_ref, 'master'))"

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    # To avoid multiple runs on single commit
    # It is still checked by push trigger, so no worries.
    if: ${{ github.env.SKIP_WORKFLOW }}
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Lint with black
      uses: psf/black@stable
      with:
        options: "--check --verbose"
        src: "app_python/src"
    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v1.5.0
      with:
        dockerfile: 'app_python/Dockerfile'

  test:
    # To avoid multiple runs on single commit
    # It is still checked by push trigger, so no worries.
    if: ${{ github.env.SKIP_WORKFLOW }}
    timeout-minutes: 30
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        # Not explicitly choosing requirements so that we won't break
        # everything if we change/restructure them it later
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r app_python/requirements/test.txt
    - name: Test with pytest
      run: |
        pytest
  
  security:
    # To avoid multiple runs on single commit
    # It is still checked by push trigger, so no worries.
    if: ${{ github.env.SKIP_WORKFLOW }}
    needs: [test, lint]
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@master
      - uses: snyk/actions/setup@master
      - name: Snyk monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true # To make sure that SARIF upload gets called
        working-directory: ./app_python
        run: snyk test --sarif-file-output=snyk.sarif
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: snyk.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: snyk-python-analysis